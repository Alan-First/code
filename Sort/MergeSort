import java.io.*;
class test  
{
    public static void mergeSort(int[] a,int n){
        if (n<=1) return;
        mergeSort_c(a,0,n-1);//1 我们需要一个递归函数
        
        return;
    }
    
    public static void mergeSort_c(int[] a,int start,int end){
        if(start>=end){
            return;
        }
        int mid = (start+end)/2;
        mergeSort_c( a,start,mid);//2 将数组层层分解
        mergeSort_c( a,mid+1,end);
        merge(a,start,mid,end);//3 对两级数组分别归并，最底层归并对象就是两个数
        return;
        
    }
    
    public static void merge(int[] a,int start,int mid,int end){
        //int len = end+1;
        int[] c = new int[end-start+1];
        int i = start;
        int j = mid+1;
        int k = 0;
        while(i<mid+1 && j<end+1){
            if(a[i]<=a[j]){
                c[k] = a[i];
                i++;
                k++;
            }else{
                c[k] = a[j];
                j++;
                k++;
            }
        }
        
        if(i==mid+1){
            while(j<end+1){
                c[k] = a[j];
                j++;
                k++;
            }
        }else{
            while(i<mid+1){
                c[k] = a[i];
                i++;
                k++;
            }
        }
        
        
        for(int m=0;m<c.length;m++){
            a[start+m]=c[m];
        }
        
        
        return;
        
    }
    
	public static void main (String[] args) throws java.lang.Exception
	{
		int[] a = {6,5,4,1,2,3};
		mergeSort(a,a.length);
		for(int i=0;i<a.length;i++){
		    System.out.println(a[i]);
		}
	}
}
